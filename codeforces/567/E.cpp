/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Rick From Rickland
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll MAXA = 101;
const ll INF = 8e18;
const ll MOD = 998244353; //1e9 dist[1][v]+ 7
const ld PI = 4 * atan((ld) 1);
ll Mark[MAXN], H[MAXN], MN[MAXN], Cost[MAXN], dist[2][MAXN], mark[MAXN], n, m, s, t;
vector<pll> adj[3][MAXN];
vector<ppl> Edge;
string ans[MAXN];

void Dijkstra(ll St, ll ind) {
    priority_queue<pll> pq;
    pq.push({0, St});
    dist[ind][St] = 0;
    while (sz(pq)) {
        ll v = pq.top().S;
        pq.pop();
        if (mark[v]) continue;
        mark[v] = 1;
        for (pll nei: adj[ind][v]) {
            ll u = nei.F, w = nei.S;
            if (dist[ind][u] > dist[ind][v] + w) {
                dist[ind][u] = dist[ind][v] + w;
                pq.push({-dist[ind][u], u});
            }
        }
    }
    return;
}

void dfs(ll v, ll par = 0, ll idx = -1) {
    H[v] = H[par] + 1;
    MN[v] = INF;
    mark[v] = true;
    for (pll nei : adj[2][v]) {
        ll u = nei.F, ind = nei.S;
        if (!mark[u]) {
            dfs(u, v, ind);
            MN[v] = min(MN[v], MN[u]);
            if (MN[u] > H[v]) Mark[ind] = true;
        } else if (ind != idx) {
            MN[v] = min(MN[v], H[u]);
        }
    }
}

int main() {
    memset(dist, 63, sizeof dist);
    fill(ans, ans + MAXN, ".");
    fast_io;
    cin >> n >> m >> s >> t;
    for (ll i = 1; i <= m; i++) {
        ll u, v, w;
        cin >> u >> v >> w;
        adj[0][u].emplace_back(v, w);
        adj[1][v].emplace_back(u, w);
        Edge.push_back({{u, v}, w});
    }
    Dijkstra(s, 0);
    memset(mark, 0, sizeof mark);
    Dijkstra(t, 1);
    for (ll i = 1; i <= m; i++) {
        ll u = Edge[i - 1].F.F, v = Edge[i - 1].F.S, w = Edge[i - 1].S;
        if (dist[0][u] + w + dist[1][v] != dist[0][t]) continue;
        adj[2][v].push_back({u, i});
        adj[2][u].push_back({v, i});
    }
    memset(mark, 0, sizeof mark);
    dfs(s);
    for (ll i = 1; i <= m; i++) {
        if (Mark[i]) {
            ans[i] = "YES";
            continue;
        }
        ll u = Edge[i - 1].F.F, v = Edge[i - 1].F.S, w = Edge[i - 1].S;
        ll cost = dist[0][t] - dist[0][u] - dist[1][v] - 1;
        if (cost <= 0) ans[i] = "NO";
        else {
            ans[i] = "CAN";
            Cost[i] = w - cost;
        }
    }
    for (ll i = 1; i <= m; i++) {
        if (ans[i] == "CAN") cout << ans[i] << sep << Cost[i] << endl;
        else cout << ans[i] << endl;
    }
    return 0;
}
