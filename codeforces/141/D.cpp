/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Rick From Rickland
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e6 + 10;
const ll MAXA = 101;
const ll INF = 8e18;
const ll MOD = 998244353; //1e9 + 7
const ld PI = 4 * atan((ld) 1);
vector<ll> Nodes;
vector<ppl> adj[MAXN];
ll mark[MAXN], dist[MAXN], T[MAXN], P[MAXN], D[MAXN], X[MAXN], n, L;
pll Par[MAXN];

void Dijkstra(ll St) {
    priority_queue<pll> pq;
    pq.push({0, St});
    dist[St] = 0;
    while (sz(pq)) {
        ll v = pq.top().S;
        pq.pop();
        if (mark[v]) continue;
        mark[v] = 1;
        for (ppl nei: adj[v]) {
            ll u = nei.F.F, w = nei.F.S, ind = nei.S;
            if (dist[u] > dist[v] + w) {
                dist[u] = dist[v] + w;
                Par[u] = {v, ind};
                pq.push({-dist[u], u});
            }
        }
    }
    return;
}

int main() {
    memset(dist, 63, sizeof dist);
    fast_io;
    set_random;
    cin >> n >> L;
    for (ll i = 1; i <= n; i++) {
        cin >> X[i] >> D[i] >> T[i] >> P[i];
        X[i] -= P[i];
        if (X[i] < 0) continue;
        T[i] += P[i];
        Nodes.push_back(X[i]);
        Nodes.push_back(X[i] + P[i] + D[i]);
    }
    Nodes.push_back(0), Nodes.push_back(L);
    sort(all(Nodes));
    Nodes.resize(unique(all(Nodes)) - Nodes.begin());
    for (ll i = 0; i < sz(Nodes) - 1; i++) {
        adj[i].push_back({{i + 1, Nodes[i + 1] - Nodes[i]}, MAXN + i});
        adj[i + 1].push_back({{i, Nodes[i + 1] - Nodes[i]}, MAXN + i});
    }
    for (ll i = 1; i <= n; i++) {
        if (X[i] < 0) continue;
        ll indu = lower_bound(all(Nodes), X[i]) - Nodes.begin();
        ll indv = lower_bound(all(Nodes), X[i] + P[i] + D[i]) - Nodes.begin();
        adj[indu].push_back({{indv, T[i]}, i});
    }
    Dijkstra(0);
    ll t = sz(Nodes) - 1;
    cout << dist[t] << endl;
    vector<ll> ans;
    while (t != 0) {
        if (Par[t].S >= MAXN) t = Par[t].F;
        else {
            ans.push_back(Par[t].S);
            t = Par[t].F;
        }
    }
    reverse(all(ans));
    cout << sz(ans) << endl;
    for (ll x : ans) cout << x << sep;
    return 0;
}

