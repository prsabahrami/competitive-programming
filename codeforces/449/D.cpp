/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Rick From Rickland
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define sep                         ' '
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define kill(x)                     return cout << x << endl , 0;

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = (1LL << 20) + 1;
const ll INF = 8e18;
const ll MOD = 1e9 + 7;
const ld PI = 4 * atan((ld) 1);
const ll LOG = 21;

ll dp[MAXN][LOG], A[MAXN], n, ans = 0;

int main() {

    scanf("%lld", &n);

    for (ll i = 1; i <= n; i++) scanf("%lld", &A[i]);
    for (ll i = 1; i <= n; i++) {
        dp[A[i]][0]++;
    }

    for (ll j = 1; j < LOG; j++) {
        for (ll i = 0; i + 1 < MAXN; i++) {
            dp[i][j] = dp[i][j - 1];
            if ((i & (1ll << (j - 1))) == 0) dp[i][j] += dp[i + (1ll << (j - 1))][j - 1];
        }
    }

    for (ll i = 0; i + 1 < MAXN; i++) {
        ll cnt = __builtin_popcountll(i);
        if (cnt & 1) {
            ans = (ans - poww(2, dp[i][LOG - 1], MOD)) % MOD;
        } else {
            ans = (ans + poww(2, dp[i][LOG - 1], MOD)) % MOD;
        }
    }
    printf("%lld\n", (ans + 5 * MOD) % MOD);
    return 0;
}
