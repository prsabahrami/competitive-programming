/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Rick From Rickland
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 3e3 + 10;
const ll MAXA = 101;
const ll INF = 8e18;
const ll MOD = 998244353; //1e9 + 7
const ld PI = 4 * atan((ld) 1);
ll Par[MAXN], n, m, Cnt = 0;
vector<pll> ans;

template<ll SIZE>
struct DSU {
    ll par[SIZE], SZ[SIZE];

    void Fill() {
        fill(SZ, SZ + SIZE, 1), memset(par, -1, sizeof par);
    }

    ll Find(ll v) {
        return (par[v] == -1 ? v : par[v] = Find(par[v]));
    }

    ll Union(ll u, ll v) {
        ll pv = Find(v), pu = Find(u);
        if (pv == pu) return 0;
        if (SZ[pv] < SZ[pu]) swap(pv, pu);
        par[pu] = pv;
        SZ[pv] += SZ[pu];
        return 1;
    }

    ll getSize(ll v) {
        return SZ[Find(v)];
    }
};

DSU<MAXN> dsu;

ll CountComps() {
    dsu.Fill();
    for (ll i = 1; i <= n; i++) dsu.Union(i, Par[i]);
    ll cnt = 0;
    for (ll i = 1; i <= n; i++) cnt += (dsu.Find(i) == i);
    return cnt;
}

void addCirc() {
    ll Ver = 0;
    for (ll i = 1; i <= n; i++) {
        if (dsu.getSize(i) != 1) {
            Ver = i;
            break;
        }
    }
    for (ll i = Ver + 1; i <= n; i++) {
        if (dsu.Find(Ver) == dsu.Find(i)) {
            ans.emplace_back(Ver, i);
            swap(Par[Ver], Par[i]);
            break;
        }
    }
    return;
}

void DecCirc() {
    for (ll i = 2; i <= n; i++) {
        if (dsu.Find(i) != dsu.Find(1)) {
            ans.emplace_back(1, i);
            swap(Par[1], Par[i]);
            break;
        }
    }
    return;
}

int main() {
    fast_io;
    set_random;
    cin >> n;
    for (ll i = 1; i <= n; i++) {
        cin >> Par[i];
    }
    cin >> m;
    ll Dest = n - m;
    while (1) {
        Cnt = CountComps();
        if (Cnt == Dest) break;
        if (Cnt < Dest) {
            addCirc();
        } else DecCirc();
    }
    cout << sz(ans) << endl;
    for (auto[i, j] : ans) {
        cout << i << sep << j << endl;
    }
    return 0;
}
