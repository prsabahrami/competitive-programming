/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Rick From Rickland
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll MAXA = 2e3 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7;
const ld PI = 4 * atan((ld) 1);
ll fact[MAXN], inv[MAXN], dp[MAXA][MAXA], A[MAXN], n, k;
map<ll, ll> Cnt;
vector<ll> cnts;

bool is_Lucky(ll x) {
    while (x) {
        ll t = x % 10;
        x /= 10;
        if (t != 4 && t != 7) return 0;
    }
    return 1;
}

void init() {
    fact[0] = 1;
    for (ll i = 1; i < MAXN; i++) {
        fact[i] = fact[i - 1] * i % MOD;
    }
    for (ll i = 0; i < MAXN; i++) {
        inv[i] = poww(fact[i], MOD - 2, MOD);
    }
}

ll cnt(ll i, ll j) {
    if (i > j) return 0;
    return (fact[j] * inv[i] % MOD * inv[j - i] % MOD);
}

int main() {
    init();
    fast_io;
    set_random;
    cin >> n >> k;
    for (ll i = 1; i <= n; i++) {
        cin >> A[i];
        if (is_Lucky(A[i])) {
            Cnt[A[i]]++;
        }
    }
    ll T = n, a, b;
    cnts.push_back(0);
    for (pll x : Cnt) {
        tie(a, b) = x;
        T -= b;
        cnts.push_back(b);
    }
    dp[0][0] = 1;
    for (ll i = 1; i < sz(cnts); i++) {
        for (ll j = 0; j < sz(cnts); j++) {
            if (!j) {
                dp[i][j] = 1;
                continue;
            }
            dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1] * cnts[i] % MOD) % MOD;
        }
    }
    ll ans = 0;
    for (ll i = 0; i <= min(k, sz(cnts)); i++) {
        ans = (ans + dp[sz(cnts) - 1][i] * cnt(k - i, T) % MOD) % MOD;
    }
    cout << ans << endl;
    return 0;
}
