/**
    * code generated by JHelper
    * More info: https://github.com/AlexeyDmitriev/JHelper
    * @author parsa & sefid
*/
#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll MAXA = 101;
const ll INF = 1e18;
const ll MOD = 998244353; //1e9 + 7
const ld PI = 4 * atan((ld) 1);

ll MUL[MAXN], A[MAXN], cnt[MAXN], n;
ll Lcm = 1, ans = INF, sum;
vector<ll> adj[MAXN], leaf;
ll LCM(ll a, ll b) {
    if(sum + 1 / a < b / __gcd(a, b)) return sum + 1;
    return b / __gcd(a, b) * a;
}

void dfs(ll v, ll par = 0) {
    if (MUL[par] > 1e18) MUL[v] = 1e18;
    else if (par == 0) MUL[v] = 1;
    else {
        if(sum + 1 / MUL[par] < cnt[par])   MUL[par] = sum + 1;
        else MUL[v] = MUL[par] * cnt[par];
    }
    if (MUL[v] >= (ll)1e18) {
        Hkill(sum);
    }
    //
    for (ll u : adj[v]) {
        if (u != par) dfs(u, v);
    }
    return;
    }
int main() {
    fast_io;
    set_random;
    fill(MUL , MUL + MAXN , 1);
    cin >> n;
    for (ll i = 1; i <= n; i++) {
        cin >> A[i];
        sum += A[i];
    }
    for (ll i = 1; i <= n - 1; i++) {
        ll u, v;
        cin >> u >> v;
        adj[u].push_back(v), adj[v].push_back(u);
    }
    for (ll i = 1; i <= n; i++) {
        if (i == 1) cnt[i] = sz(adj[i]);
        else cnt[i] = sz(adj[i]) - 1;
    }
    for (ll i = 1; i <= n; i++) if (sz(adj[i]) == 1 && i != 1) leaf.push_back(i);
    //bibbbbbbbbbbb
    //cout << 1 << endl;
    dfs(1);
    for (ll LEAF : leaf) {
        Lcm = LCM(Lcm, MUL[LEAF]);
    }
    for (ll LEAF : leaf) {
        ll x;
        if(INF / MUL[LEAF] < A[LEAF])   x = INF;
        else     x = min(MUL[LEAF] * A[LEAF], (ll) 1e18);
        ans = min(ans, x / Lcm);
    }
    //cout << ans << sep << lcm << endl;
    cout << sum - ans * Lcm << endl;
    return 0;
}
