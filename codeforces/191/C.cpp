/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Rick From Rickland
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 998244353; //1e9 + 7
const ld PI = 4 * atan((ld) 1);
ll ans[MAXN], cnt[MAXN], L[MAXN], R[MAXN], Par[MAXN][LOG], n, k, t = 0;
vector<pll> adj[MAXN];

void dfs(ll v, ll p = -1) {
    if (p == -1) Par[v][0] = v;
    for (ll i = 1; i < LOG; i++) {
        Par[v][i] = Par[Par[v][i - 1]][i - 1];
    }
    L[v] = ++t;
    for (pll nei : adj[v]) {
        ll u = nei.F, ind = nei.S;
        if (u == p) continue;
        Par[u][0] = v;
        dfs(u, v);
    }
    R[v] = ++t;
}

bool isAnc(ll u, ll v) {
    return L[u] <= L[v] && R[u] >= R[v];
}

ll LCA(ll v, ll u) {
    if (isAnc(u, v))
        swap(u, v);
    for (ll i = LOG; i--;) {
        if (!isAnc(Par[v][i], u)) {
            v = Par[v][i];
        }
        if (!isAnc(Par[u][i], v)) {
            u = Par[u][i];
        }
    }
    if (isAnc(u, v)) return u;
    else if (isAnc(v, u)) return v;
    else return Par[u][0];
}

void PartialSum(ll v, ll p = -1) {
    for (pll nei : adj[v]) {
        ll u = nei.F, ind = nei.S;
        if (u == p) continue;
        PartialSum(u, v);
        cnt[v] += cnt[u];
        ans[ind] = cnt[u];
    }
}

int main() {
    fast_io;
    set_random;
    cin >> n;
    for (ll i = 1; i <= n - 1; i++) {
        ll u, v;
        cin >> u >> v;
        adj[u].push_back({v, i}), adj[v].push_back({u, i});
    }
    dfs(1);
    cin >> k;
    while (k--) {
        ll u, v;
        cin >> u >> v;
        cnt[u]++, cnt[v]++, cnt[LCA(u, v)] -= 2;
    }
    PartialSum(1);
    for (ll i = 1; i <= n - 1; i++) {
        cout << ans[i] << sep;
    }
    cout << endl;
    return 0;
}
