/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author parsa bahrami
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e6 + 10;
const ll MAXA = 101;
const ll INF = 8e18;
const ll MOD = 998244353; //1e9 + 7
const ld PI = 4 * atan((ld) 1);
ll MX[MAXN], MN[MAXN], T = 0, cnt, L[MAXN], n, CntMin[MAXN], CntMax[MAXN], ps[MAXN];

int main() {
    fast_io;
    set_random;
    cin >> n;
    memset(MN, 63, sizeof MN);
    memset(MX, -63, sizeof MX);
    for (ll i = 0; i < n; i++) {
        cin >> L[i];
        bool OK = 0;
        for (ll j = 0; j < L[i]; j++) {
            ll x;
            cin >> x;
            ll tmp = MN[i];
            if (tmp < x) OK = true;
            MN[i] = min(MN[i], x), MX[i] = max(MX[i], x);
        }
        if (OK) T++;
        else {
            CntMin[MN[i]]++, CntMax[MX[i]]++;
        }
    }
    ll ans = T * n * 2 - T * T;
    partial_sum(CntMin, CntMin + MAXN, ps);
    for (ll i = 0; i < MAXN; i++) {
        if (!i) continue;
        ans += ps[i - 1] * CntMax[i];
    }
    cout << ans << endl;
    return 0;
}
