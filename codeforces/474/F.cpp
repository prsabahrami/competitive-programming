/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Rick From Rickland
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e6 + 10;
const ll MAXA = 101;
const ll INF = 8e18;
const ll MOD = 998244353; //1e9 + 7
const ld PI = 4 * atan((ld) 1);
ll seg[MAXN << 2], A[MAXN], n, q, l, r;
map<ll, vector<ll>> ind;
void Build(ll id, ll l, ll r) {
    if (r - l == 1) {
        seg[id] = A[l];
        return;
    }
    ll mid = (l + r) >> 1;
    Build((id << 1), l, mid);
    Build((id << 1) | 1, mid, r);
    seg[id] = __gcd(seg[(id << 1)], seg[(id << 1) | 1]);
}

ll Get(ll id, ll l, ll r, ll ql, ll qr) {
    if (qr <= l || r <= ql) return 0;
    if (ql <= l && r <= qr) return seg[id];
    ll mid = (l + r) >> 1;
    return __gcd(Get((id << 1), l, mid, ql, qr), Get((id << 1) | 1, mid, r, ql, qr));
}

int main() {
    fast_io;
    set_random;
    cin >> n;
    for (ll i = 1; i <= n; i++) {
        cin >> A[i];
        ind[A[i]].push_back(i);
    }
    Build(1, 1, n + 1);
    //cout << Get(1, 1, n + 1, 2,  n + 1) << endl;
    cin >> q;
    while (q--) {
        cin >> l >> r;
        ll t = Get(1, 1, n + 1, l, r + 1);
        //cout << l << sep << r << sep << t << endl;
        if (!sz(ind[t])) cout << r - l + 1 << endl;
        else {
            ll idx1 = lower_bound(all(ind[t]), l) - ind[t].begin(), idx2 = upper_bound(all(ind[t]), r) - ind[t].begin();
            cout << r - l + 1 - idx2 + idx1 << endl;
        }
    }
    return 0;
}
