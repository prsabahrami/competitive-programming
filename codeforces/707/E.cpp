/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Rick From Rickland
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e3 + 10;
const ll MAXA = 101;
const ll INF = 8e18;
const ll MOD = 998244353; //1e9 + 7
const ld PI = 4 * atan((ld) 1);
ll Light[MAXN], mark[MAXN], Len[MAXN], n, m, k, q, ind, x1, y1, x2, y2;
vector<ppl> Garland[MAXN];
string s;

template<ll SZ>
struct BITree {
    ll fen[SZ][SZ];

    BITree() {
        memset(fen, 0, sizeof fen);
    }

    void update(ll x, ll Y, ll val) {
        for (; x < SZ; x += (x & (-x))) {
            for (ll y = Y; y < SZ; y += (y & (-y))) {
                fen[x][y] += val;
            }
        }
    }

    ll get(ll x, ll Y) {
        ll sum = 0;
        for (; x; x -= (x & (-x))) {
            for (ll y = Y; y; y -= (y & (-y))) {
                sum += fen[x][y];
            }
        }
        return sum;
    }

    ll getPs(ll x1, ll y1, ll x2, ll y2) {
        return (get(x2, y2) + get(x1, y1) - get(x2, y1) - get(x1, y2));
    }
};

BITree<MAXN> fen;

int main() {
    fast_io;
    set_random;
    cin >> n >> m >> k;
    for (ll i = 1; i <= k; i++) {
        cin >> Len[i];
        Light[i] = 1;
        for (ll j = 1; j <= Len[i]; j++) {
            ll x, y, w;
            cin >> x >> y >> w;
            Garland[i].push_back({{x, y}, w});
            fen.update(x, y, w);
        }
    }
    //cout << fen.getPs(0, 0, 4, 4) << endl;
    cin >> q;
    while (q--) {
        cin >> s;
        if (s == "ASK") {
            cin >> x1 >> y1 >> x2 >> y2;
            for (ll i = 1; i <= k; i++) {
                if (mark[i]) {
                    mark[i] ^= 1;
                    for (ppl bulb : Garland[i]) {
                        fen.update(bulb.F.F, bulb.F.S, (Light[i] ? -bulb.S : bulb.S));
                    }
                    Light[i] ^= 1;
                }
            }
            cout << fen.getPs(x1 - 1, y1 - 1, x2, y2) << endl;
        } else {
            cin >> ind;
            mark[ind] ^= 1;
        }
    }
    return 0;
}
