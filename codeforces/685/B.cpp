/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author parsa bahrami
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
//#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e6 + 10;
const ll MAXA = 101;
const ll INF = 8e18;
const ll MOD = 998244353; //1e9 + 7
const ld PI = 4 * atan((ld) 1);
vector<ll> adj[MAXN];
ll Par[MAXN], Sz[MAXN], M1[MAXN], ans[MAXN], n, q;

bool Chk(ll Sub, ll Cen) {
    ll T = Sz[Sub] - Sz[Cen];
    if (T * 2 > Sz[Sub]) return 0;
    return 1;
}

void dfs(ll v) {
    Sz[v] = 1;
    for (ll u : adj[v]) {
        dfs(u);
        Sz[v] += Sz[u];
        M1[v] = max(M1[v], Sz[u]);
    }
    return;
}

ll DFS(ll v) {
    if (Sz[v] == 1) return ans[v] = v;
    set<pll> Child;
   // cout << "START" << endl;
    for (ll i = 0; i < sz(adj[v]); i++) {
        ll u = adj[v][i];
        DFS(u);
        Child.insert({Sz[u], i + 1});
    }
    //cout << "END" << endl;
    auto it = Child.end();
    it--;
    ll Big = (*it).S;
    ll Ans = ans[adj[v][Big - 1]];
    while (!Chk(v, Ans)) {
        Ans = Par[Ans];
    }
    ans[v] = Ans;
    return 0;
}

int main() {
    fast_io;
    set_random;
    cin >> n >> q;
    for (ll i = 2; i <= n; i++) {
        cin >> Par[i];
        adj[Par[i]].push_back(i);
    }
    dfs(1);
    for (ll v = 1; v <= n; v++) {
        //cout << Sz[v] << sep << M1[v] << sep << Par[v] << endl;
    }
    DFS(1);
    while (q--) {
        ll v;
        cin >> v;
        cout << ans[v] << endl;
    }
    return 0;
}
