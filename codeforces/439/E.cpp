/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Rick From Rickland
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll MAXA = 101;
const ll INF = 8e18;
const ll MOD = 1e9 + 7;
const ld PI = 4 * atan((ld) 1);
vector<ll> Divisor[MAXN];
ll Fact[MAXN], inv[MAXN], ans[MAXN], Turn[MAXN], q;

void init() {
    Fact[0] = 1;
    for (ll i = 1; i < MAXN; i++) {
        Fact[i] = Fact[i - 1] * i % MOD;
    }
    for (ll i = 0; i < MAXN; i++) {
        inv[i] = poww(Fact[i], MOD - 2, MOD);
    }
}

void PrimeFacs() {
    for (ll i = 1; i < MAXN; i++) {
        for (ll j = i + i; j < MAXN; j += i) Divisor[j].push_back(i);
    }
}

ll C(ll n, ll k) {
    if (k < 0 || k > n)
        return 0;
    if (k == 0)
        return 1;
    return (Fact[n] * inv[k] % MOD * inv[n - k] % MOD);
}

void Solve(ll n, ll f) {
    Turn[n] = q + 1;
    if (n < f) ans[n] = 0;
    else ans[n] = C(n - 1, f - 1);
    for (ll Dv : Divisor[n]) {
        if (Turn[Dv] != q + 1)
            Solve(Dv, f);
        ans[n] = (ans[n] - ans[Dv] + MOD) % MOD;
    }
}

int main() {
    init();
    PrimeFacs();
    set_random;
    scanf("%lld", &q);
    while (q--) {
        ll n, f;
        scanf("%lld%lld", &n, &f);
        Solve(n, f);
        printf("%lld\n", (ans[n] + MOD) % MOD);
    }
    return 0;
}
