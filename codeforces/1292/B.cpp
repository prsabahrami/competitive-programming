/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Rick From Rickland
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e6 + 10;
const ll MAXA = 101;
const ll INF = 8e18;
const ll MOD = 998244353; //1e9 + 7
const ld PI = 4 * atan((ld) 1);
ll X[MAXN], Y[MAXN], xs, ys, ax, ay, bx, by, t, ind = -1, x, y;

int main() {
    fast_io;
    set_random;
    cin >> x >> y >> ax >> ay >> bx >> by >> xs >> ys >> t;
    X[0] = x, Y[0] = y;
    for (ll i = 0; i < 110 && X[i] - xs + Y[i] - ys <= t; i++, ind = i) {
        X[i + 1] = X[i] * ax + bx;
        Y[i + 1] = Y[i] * ay + by;
    }
    ll ans = 0;
    for (ll i = 0; i <= ind; i++) {
        ll T = 0, cnt = 0, lastx = xs, lasty = ys;
        for (ll j = i; j <= ind && T + abs(X[j] - lastx) + abs(Y[j] - lasty) <= t; j++) {
            T += abs(X[j] - lastx) + abs(Y[j] - lasty);
            lastx = X[j], lasty = Y[j];
            cnt++;
        }
        ans = max(ans, cnt);
        T = 0, cnt = 0, lastx = xs, lasty = ys;
        for (ll j = i; j >= 0 && T + abs(X[j] - lastx) + abs(Y[j] - lasty) <= t; j--) {
            T += abs(X[j] - lastx) + abs(Y[j] - lasty);
            lastx = X[j], lasty = Y[j];
            cnt++;
        }
        ans = max(ans, cnt);
    }
    cout << ans << endl;
    return 0;
}
