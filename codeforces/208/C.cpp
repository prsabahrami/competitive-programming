/**
    * code generated by JHelper
    * More info: https://github.com/AlexeyDmitriev/JHelper
    * @author Rick From Rickland
*/

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll MAXA = 101;
const ll INF = 8e18;
const ll MOD = 998244353; //1e9 + 7
const ld PI = 4 * atan((ld) 1);
vector<ll> Floor[2], adj[MAXN];
ll dist[MAXA][MAXA], cnt[MAXA][MAXA], n, m, ans;
queue<ll> Q;
int main() {
    fast_io;
    set_random;
    cout << fixed << setprecision(10);
    memset(dist, 63, sizeof dist);
    cin >> n >> m;
    for (ll i = 1; i <= m; i++) {
        ll u, v;
        cin >> u >> v;
        adj[v].push_back(u), adj[u].push_back(v);
    }
    Q.push(1);
    dist[1][1] = 0;
    cnt[1][1] = 1;
    while (sz(Q)) {
        ll v = Q.front();
        Q.pop();
        for (ll u : adj[v]) {
             if (dist[1][u] > dist[1][v] + 1) {
                dist[1][u] = dist[1][v] + 1;
                Q.push(u);
             }
             if (dist[1][u] == dist[1][v] + 1) {
                cnt[1][u] += cnt[1][v];
             }
        }
    }
    Q.push(n);
    dist[n][n] = 0;
    cnt[n][n] = 1;
    while (sz(Q)) {
        ll v = Q.front();
        Q.pop();
        for (ll u : adj[v]) {
            if (dist[n][u] > dist[n][v] + 1) {
                dist[n][u] = dist[n][v] + 1;
                Q.push(u);
            }
            if (dist[n][u] == dist[n][v] + 1) {
                cnt[n][u] += cnt[n][v];
             }
        }
    }
    ll ans = 1, Ver = 0;
    for (ll i = 1; i <= n; i++) {
        if (i == 1 || i == n) {
            ans = max(ans, cnt[1][n]);
            continue;
        }
        if (dist[1][i] + dist[n][i] != dist[1][n]) continue;
        ans = max(ans, 2 * cnt[1][i] * cnt[n][i]);
    }
    //cout << cnt[1][n] << endl;
    cout << ld(ans) / cnt[1][n] << endl;
    return 0;
}
